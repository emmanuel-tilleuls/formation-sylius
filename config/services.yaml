# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: fr_FR

services:
    # Default configuration for services in *this* file
    _defaults:
        # Automatically injects dependencies in your services
        autowire: true

        # Automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true

        # Allows optimizing the container by removing unused services; this also means
        # fetching services directly from the container via $container->get() won't work
        public: false

    _instanceof:
        Sylius\Bundle\ResourceBundle\Controller\ResourceController:
            autowire: false
        Sylius\Bundle\ResourceBundle\Form\Type\AbstractResourceType:
            autowire: false

    # Makes classes in src/ available to be used as services;
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # Controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # fix bug in sf4
    #security.authentication_manager: '@security.authentication.manager'

    App\Menu\AdminMenuListener:
        tags:
            - { name: kernel.event_listener, event: sylius.menu.admin.main, method: addAdminMenuItems }

    App\Event\Listener\Admin\Cms\PageUpdateListener:
        tags:
            - { name: kernel.event_listener, event: admin.cms_page.pre_create }
            - { name: kernel.event_listener, event: admin.cms_page.pre_update }

    App\Form\Extension\ProductTypeExtension:
        tags:
            - { name: form.type_extension }

    App\OrderProcessor\AddDressOrderProcessor:
        arguments:
            $cartItemFactory: '@sylius.custom_factory.order_item'

    ## Service pour ajout d'une gateway de paiement
    ### Version avec le GatewayFactoryBuilder comme la doc :
    ###   - https://docs.sylius.com/en/latest/cookbook/payments/custom-payment-gateway.html
    ###   - https://github.com/Payum/Payum/blob/master/docs/symfony/custom-action-usage.md
    app.dummy_payment:
        class: Payum\Core\Bridge\Symfony\Builder\GatewayFactoryBuilder
        arguments: [ App\Payum\DummyPaymentGatewayFactory ]
        tags:
            - { name: payum.gateway_factory_builder, factory: dummy_payment }

    app.dummy_payment.action.status:
        class: App\Payum\Action\StatusAction
        public: true
        tags:
            - { name: payum.action, factory: dummy_payment, alias: payum.action.status }

    app.dummy_payment.action.capture:
        class: App\Payum\Action\CaptureAction
        public: true
        tags:
            - { name: payum.action, factory: dummy_payment, alias: payum.action.capture }

    ### Version de Arnaud (https://slides.com/arnaudfrezet/sylius#/24/7)
    #App\Payum\DummyPaymentGatewayFactory:
    #    arguments:
    #        $captureAction: '@App\Payment\Action\CaptureAction'
    #        $statusAction: '@App\Payment\Action\StatusAction'
    #    tags:
    #        - {name: payum.gateway_factory_builder, factory: dummy_payment}


    App\Form\Type\Admin\DummyPaymentGatewayConfigurationType:
        tags:
            - { name: sylius.gateway_configuration_type, type: dummy_payment, label: 'Dummy Payment'}
            - { name: form.type }